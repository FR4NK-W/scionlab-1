# Copyright 2019 ETH Zurich
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    environment:
      SCION_SRC: "https://github.com/netsec-ethz/netsec-scion"
      SC: "/home/scion/go/src/github.com/scionproto/scion"

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v3-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv /tmp/venv 2>&1
            . /tmp/venv/bin/activate
            pip install --require-hashes -r requirements.txt -r dev-requirements.txt

            [ -d /tmp/scion ] || git clone https://github.com/netsec-ethz/netsec-scion.git /tmp/scion
            cd /tmp/scion
            git fetch && git checkout scionlab && git reset --hard origin/scionlab

      - save_cache:
          paths:
            - /tmp/venv
            - /tmp/scion
          key: v3-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}

      # run flake8
      - run:
          name: run flake8 style checker
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/flake8/
            flake8 --config=flake8.ini --format junit-xml --output-file=test-reports/flake8/results.xml

      # run Django's tests (using nose as the test runner)
      - run:
          name: run tests
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/django/
            # Create migrations, otherwise test DB will not be initialised properly
            # TODO: remove once migrations are checked in!
            PYTHONPATH=/tmp/scion/python python manage.py makemigrations scionlab
            exit 0
            PYTHONPATH=/tmp/scion/python python manage.py test --with-xunit --xunit-file=test-reports/django/results.xml
          when: always

      - setup_remote_docker

      # Setup coordinator
      - run:
          name: Setup coordinator
          command: |
            set -x
            # We first start only the coordinator
            docker-compose -f ./docker-compose.yml create coord
            # create is deprecated in v18, use no-start when circleci updates its images
            # docker-compose -f ./docker-compose.yml up --no-start coord
            docker cp ./ coord:/home/circleci/repo/scionlab
            docker-compose -f ./docker-compose.yml up --no-recreate -d coord

      - run:
          name: Build latest scion binaries for scionlab
          command: |
            #cd /tmp/scion
            #sudo apt update
            #./env/deps
            #./scion.sh build

            # Use builder container, to build once when not using local image
            docker run --name scion_builder --rm -d\
              --entrypoint /bin/bash ethznetsec/scion_base -c "sudo apt-get install --assume-yes libpcap0.8 libpcap0.8-dev; git clone ${SCION_SRC} ${SC}; cd ${SC}; ./env/deps; make; until [ -e ./done ]; do sleep 10; done;"
            echo "Started builder"
            docker exec scion_builder /bin/bash -c "until [ -e ${SC}/bin/sig ]; do sleep 10; done;"
            echo "Build completed"
            # Copying built binaries, explicitly ignoring braccept
            for x in border cert_srv dispatcher path_srv pingpong scion-pki sciond scmp sig; do
                docker cp scion_builder:${SC}/bin/${x} /tmp/scion/bin/;
            done
            docker cp scion_builder:${SC}/proto /tmp/scion
            echo "Finished copying"
            docker exec scion_builder /bin/bash -c "touch ${SC}/done"

            # use local cache to speedup local execution until packages are available
            # add $SC/bin and $SC/proto to your cache directory and source it
            #mv ./cache/bin/* /tmp/scion/bin/
            #mv ./cache/proto/* /tmp/scion/proto/

      # Start integration tests
      - run:
          name: Start containers and verify they are working
          command: |
            set -x
            # docker-compose will start 5 containers, the one with the coordinator will be named `coord`
            # Then we have one core AS container coreAS110, two infra ASes infraAS111 and infraAS112 and 
            # a zookeeper instance they share.

            # We start another container with curl in the same network as `coord` to check `coord` is ready. 
            # All exposed ports from `coord` are available on `localhost` in this new container.
            docker run --net repo_as_net --name curl_test\
              --rm --entrypoint /bin/bash circleci/buildpack-deps:xenial -c "until curl --retry 5 --retry-delay 1 http://172.31.0.10:8000/user/login/; do echo 'Coord unreachable, retrying...'; sleep 5; done"

            export coreAS110IP=172.31.0.110 infraAS111IP=172.31.0.111 infraAS112IP=172.31.0.112 
            sudo -E docker-compose -f ./docker-compose.yml up -d zookeeper coreAS110 infraAS111 infraAS112

            # speedup deployment until we have binary packages
            for dst_AS in coreAS110 infraAS111 infraAS112; do
                for src_dir in bin supervisor python proto env; do
                    docker cp /tmp/scion/${src_dir} ${dst_AS}:${SC}
                done
                for f in $(ls .circleci/setup/); do
                    docker cp .circleci/setup/${f} ${dst_AS}:/tmp/
                done
            done

            # We capture the exit codes from the infraAS containers
            E111=$(docker wait infraAS111)
            E112=$(docker wait infraAS112)
            echo -e "Exit codes:\n\t\tinfraAS111: ${E111}\n\t\tinfraAS112: ${E112}"
            docker logs coreAS110
            docker logs infraAS111
            docker logs infraAS112

      - run:
          name: Start VPN containers and verify the connection over VPN works 
          command: |
            set -x
            # Skip if not running on a local branch, since CircleCI does not support docker privileged
            if [[ ${CIRCLE_BRANCH} != *"_local"* ]]; then
              exit 0
            fi
            echo "Start containers required for VPN AP and verify they are working"
            export coreAS113IP=172.31.0.113 infraAS114IP=172.31.0.114
            sudo -E docker-compose -f ./docker-compose.yml up -d coreAS113 infraAS114

            # speedup deployment until we have binary packages
            for dst_AS in coreAS113 infraAS114; do
                for src_dir in bin supervisor python proto env; do
                    docker cp /tmp/scion/${src_dir} ${dst_AS}:${SC}
                done
                for f in $(ls .circleci/setup/); do
                    docker cp .circleci/setup/${f} ${dst_AS}:/tmp/
                done
            done
            # Wait for AP to be set up (key generation is slow)
            docker exec infraAS114 /bin/bash -c "until [ -e ${SC}/done ]; do sleep 1; done;"
            echo "AP started"

            # Start user AS container, create user AS and connect:
            docker run --net repo_as_net --privileged -d --name userAS1\
              --entrypoint /bin/bash ethznetsec/scion_base:latest -c 'sleep 10; /tmp/VPNnewUserAS.sh'  # waits for setup script to be loaded
            for f in $(ls .circleci/setup/); do
                docker cp .circleci/setup/${f} userAS1:/tmp/
            done
            for src_dir in bin supervisor python proto env; do
                docker cp /tmp/scion/${src_dir} userAS1:${SC}
            done
            # Wait for client to be setup
            sleep 180
            echo "Starting VPN client SCMPs"
            docker exec userAS1 /bin/bash -c "./bin/scmp echo -c 10 -local 20-ffaa:1:1,[127.0.0.1] -remote 20-ffaa:0:1405,[127.0.0.1]"
            docker stop userAS1; docker rm userAS1;
            
      - run:
          name: Wind down the containers
          command: |
            docker-compose -f ./docker-compose.yml down

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports
          destination: test-reports
      
